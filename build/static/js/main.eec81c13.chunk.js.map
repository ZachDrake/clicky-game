{"version":3,"sources":["components/nav/Nav.js","components/jumpbotron/Jumbotron.js","components/card/Card.js","components/board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","score","highScore","Jumbotron","Card","onClick","handleClick","src","alt","Board","cardWrapStyle","margin","state","cards","clicked","shuffle","array","cb","rval","length","card","Math","floor","random","includes","push","_this","setState","restart","alert","concat","Object","objectSpread","shuffled","console","log","updateScore","_this2","this","_this3","map","_ref","idx","row","style","card_Card","Component","App","nav_Nav","jumpbotron_Jumbotron","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eec81c13.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"nav d-flex justify-content-around\">\r\n        <h3>Clicky Game</h3>\r\n        <h3>Click an image to begin!</h3>\r\n        <h3>Score: {props.score}| Top Score: {props.highScore}</h3>\r\n            \r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4 d-flex justify-content-center\">Clicky Game!</h1>\r\n                <p className=\"display d-flex justify-content-center\"><strong>Click on an image to earn points, but don't click on any more than once!</strong></p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\n//import cardinfo from '../../cards.json';\r\n\r\n\r\n// let i = Math.floor(Math.random()* 12) -1;\r\n// console.log(cardinfo)\r\n\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <img className=\"imgCard\" onClick={() => props.handleClick(props.src)} src={props.src} alt={props.src} />\r\n);\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport Card from \"../card/Card\";\r\nimport cards from '../../cards.json';\r\n\r\nexport default class Board extends Component {\r\n\r\n    cardWrapStyle = {\r\n        margin: \"20px\"\r\n    }\r\n\r\n    state = {\r\n        cards: [],\r\n        clicked: {}\r\n    }\r\n\r\n    shuffle = (array, cb) => {\r\n        let rval = [];\r\n        while(rval.length < array.length){\r\n            const card = array[Math.floor(Math.random() * array.length)];\r\n            if (!rval.includes(card)){\r\n                rval.push(card);\r\n            }\r\n        }\r\n        cb(rval);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.shuffle(cards, shuffled => {\r\n            console.log(shuffled)\r\n            this.setState({\r\n                cards: shuffled\r\n            })\r\n        })\r\n    }\r\n\r\n    handleClick = (src) => {\r\n        if (!this.state.clicked[src]){\r\n            const clicked = {...this.state.clicked};\r\n            clicked[src] = true;\r\n            this.shuffle(cards, shuffled => {\r\n                console.log(shuffled)\r\n                this.setState({cards: shuffled, clicked}, () => {\r\n                    this.props.updateScore((state, props) => {\r\n                        console.log(state);\r\n                        if (state.score >= state.highScore){\r\n                            return {\r\n                                score: state.score + 1, \r\n                                highScore: state.highScore + 1\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                score: state.score + 1\r\n                            }\r\n                        }\r\n    \r\n                      });\r\n                })\r\n            })\r\n        } else {\r\n            let clicked = {};\r\n            this.setState({clicked}, this.props.restart);\r\n            alert(`Game Over!\\nYou Guessed ${this.props.score} Correctly`)\r\n        }\r\n    }\r\n\r\n   \r\n    render() {\r\n        console.log(this.state.cards);\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.cards.map(({ src }, idx) => {\r\n                    if (!(idx % 4)) {\r\n                        let firstCard = this.state.cards[idx],\r\n                            secondCard = this.state.cards[idx + 1],\r\n                            thirdCard = this.state.cards[idx + 2],\r\n                            fourthCard = this.state.cards[idx + 3];\r\n                        let row = [firstCard, secondCard, thirdCard, fourthCard];\r\n                        console.log(row, idx)\r\n                        return (\r\n                            <div className=\"row d-flex justify-content-around\">\r\n                                {row.map(card => {\r\n                                    if (card) {\r\n                                        return (\r\n                                        <div style={this.cardWrapStyle} className=\"col-sm-2\">\r\n                                            <Card handleClick={this.handleClick} src={card.src} />\r\n                                        </div>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        )\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport Nav from './components/nav/Nav';\nimport Jumbotron from './components/jumpbotron/Jumbotron';\nimport Board from './components/board/Board';\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    highScore: 0\n  }\n\n  restart = () => {\n    this.setState({score: 0});\n  }\n\n  updateScore = (score) => {\n    this.setState(score);\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} highScore={this.state.highScore}/>\n        <Jumbotron />\n        <Board restart={this.restart}\n         updateScore={this.updateScore}\n         cards={this.state.cards} \n         score={this.state.score} />\n\n      </div>\n    );\n  }\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}